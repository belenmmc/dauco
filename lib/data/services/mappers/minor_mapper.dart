import 'package:dauco/domain/entities/minor.entity.dart';

class MinorMapper {
  static Minor toDomain(Map<String, dynamic> minor) {
    return Minor(
      minorId: minor['menor_id'] as int,
      reference: minor['referencia'] as int,
      managerId: minor['responsable_id'] as int,
      birthdate: DateTime.parse(minor['fecha_nacimiento'] as String),
      ageRange: minor['rango_edad'] as String,
      registeredAt: DateTime.parse(minor['alta'] as String),
      testsNum: minor['num_tests'] as int,
      completedTests: minor['test_completados'] as int,
      sex: minor['sexo'] as String,
      zipCode: minor['cp'] as int,
      fatherAge: minor['edad_padre'] as int,
      motherAge: minor['edad_madre'] as int,
      fatherJob: minor['trabajo_padre'] as String,
      motherJob: minor['trabajo_madre'] as String,
      fatherStudies: minor['estudios_padre'] as String,
      motherStudies: minor['estudios_madre'] as String,
      parentsCivilStatus: minor['estado_civil_padres'] as String,
      siblings: minor['hermanos'] as int,
      siblingsPosition: minor['posicion_hermanos'] as int,
      birthType: minor['tipo_parto'] as String,
      gestationWeeks: minor['semana_gestacion'] as int,
      birthIncidents: minor['incidencias_parto'] as String,
      birthWeight: minor['peso_nacimiento'] as int,
      socioeconomicSituation: minor['situacion_socioeconomica'] as String,
      familyBackground: minor['antecedentes_familiares'] as String,
      familyMembers: minor['familiares_domicilio'] as int,
      familyDisabilities: minor['familiares_discapacidad'] as String,
      schoolingLevel: minor['nivel_escolarizacion'] as String,
      schoolingObservations: minor['observaciones_escolarizacion'] as String,
      relevantDiseases: minor['enfermedades_relevantes'] as String,
      evaluationReason: minor['motivo_valoracion'] as String,
      apgarTest: minor['test_apgar'] as int,
      adoption: minor['adopcion'] as int,
      clinicalJudgement: minor['juicio_clinico'] as String,
    );
  }

  static Map<String, dynamic> toJson(Minor minor) {
    return {
      'menor_id': minor.minorId,
      'referencia': minor.reference,
      'responsable_id': minor.managerId,
      'fecha_nacimiento': minor.birthdate.toIso8601String(),
      'rango_edad': minor.ageRange,
      'alta': minor.registeredAt.toIso8601String(),
      'num_tests': minor.testsNum,
      'test_completados': minor.completedTests,
      'sexo': minor.sex,
      'cp': minor.zipCode,
      'edad_padre': minor.fatherAge,
      'edad_madre': minor.motherAge,
      'trabajo_padre': minor.fatherJob,
      'trabajo_madre': minor.motherJob,
      'estudios_padre': minor.fatherStudies,
      'estudios_madre': minor.motherStudies,
      'estado_civil_padres': minor.parentsCivilStatus,
      'hermanos': minor.siblings,
      'posicion_hermanos': minor.siblingsPosition,
      'tipo_parto': minor.birthType,
      'semana_gestacion': minor.gestationWeeks,
      'incidencias_parto': minor.birthIncidents,
      'peso_nacimiento': minor.birthWeight,
      'situacion_socioeconomica': minor.socioeconomicSituation,
      'antecedentes_familiares': minor.familyBackground,
      'familiares_domicilio': minor.familyMembers,
      'familiares_discapacidad': minor.familyDisabilities,
      'nivel_escolarizacion': minor.schoolingLevel,
      'observaciones_escolarizacion': minor.schoolingObservations,
      'enfermedades_relevantes': minor.relevantDiseases,
      'motivo_valoracion': minor.evaluationReason,
      'test_apgar': minor.apgarTest,
      'adopcion': minor.adoption,
      'juicio_clinico': minor.clinicalJudgement,
    };
  }
}
