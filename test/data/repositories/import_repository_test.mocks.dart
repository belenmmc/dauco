// Mocks generated by Mockito 5.4.5 from annotations
// in dauco/test/data/repositories/import_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dauco/data/services/import_service.dart' as _i2;
import 'package:dauco/domain/entities/imported_user.entity.dart' as _i5;
import 'package:dauco/domain/entities/item.entity.dart' as _i8;
import 'package:dauco/domain/entities/minor.entity.dart' as _i6;
import 'package:dauco/domain/entities/test.entity.dart' as _i7;
import 'package:excel/excel.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ImportService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImportService extends _i1.Mock implements _i2.ImportService {
  MockImportService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Excel?> loadFile() =>
      (super.noSuchMethod(
            Invocation.method(#loadFile, []),
            returnValue: _i3.Future<_i4.Excel?>.value(),
          )
          as _i3.Future<_i4.Excel?>);

  @override
  _i3.Future<List<_i5.ImportedUser>> getUsers(
    dynamic file, {
    int? page = 1,
    int? pageSize = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUsers,
              [file],
              {#page: page, #pageSize: pageSize},
            ),
            returnValue: _i3.Future<List<_i5.ImportedUser>>.value(
              <_i5.ImportedUser>[],
            ),
          )
          as _i3.Future<List<_i5.ImportedUser>>);

  @override
  _i3.Future<List<_i6.Minor>> getMinors(
    dynamic file, {
    int? page = 1,
    int? pageSize = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMinors,
              [file],
              {#page: page, #pageSize: pageSize},
            ),
            returnValue: _i3.Future<List<_i6.Minor>>.value(<_i6.Minor>[]),
          )
          as _i3.Future<List<_i6.Minor>>);

  @override
  _i3.Future<List<_i7.Test>> getTests(dynamic file, int? minorId) =>
      (super.noSuchMethod(
            Invocation.method(#getTests, [file, minorId]),
            returnValue: _i3.Future<List<_i7.Test>>.value(<_i7.Test>[]),
          )
          as _i3.Future<List<_i7.Test>>);

  @override
  _i3.Future<List<_i8.Item>> getItems(dynamic file, int? testId) =>
      (super.noSuchMethod(
            Invocation.method(#getItems, [file, testId]),
            returnValue: _i3.Future<List<_i8.Item>>.value(<_i8.Item>[]),
          )
          as _i3.Future<List<_i8.Item>>);
}
