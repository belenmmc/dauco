// Mocks generated by Mockito 5.4.5 from annotations
// in dauco/test/domain/usecases/login_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dauco/data/repositories/implementation/user_repository.dart'
    as _i3;
import 'package:dauco/data/services/user_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserService_0 extends _i1.SmartFake implements _i2.UserService {
  _FakeUserService_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserService get userService => (super.noSuchMethod(
        Invocation.getter(#userService),
        returnValue: _FakeUserService_0(
          this,
          Invocation.getter(#userService),
        ),
      ) as _i2.UserService);

  @override
  set userService(_i2.UserService? _userService) => super.noSuchMethod(
        Invocation.setter(#userService, _userService),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> login(String? email, String? password) =>
      (super.noSuchMethod(
        Invocation.method(#login, [email, password]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(#logout, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(#resetPassword, [email]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
