// Mocks generated by Mockito 5.4.5 from annotations
// in dauco/test/domain/usecases/get_minors_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dauco/data/repositories/implementation/import_repository.dart'
    as _i3;
import 'package:dauco/data/services/import_service.dart' as _i2;
import 'package:dauco/domain/entities/imported_user.entity.dart' as _i6;
import 'package:dauco/domain/entities/item.entity.dart' as _i9;
import 'package:dauco/domain/entities/minor.entity.dart' as _i7;
import 'package:dauco/domain/entities/test.entity.dart' as _i8;
import 'package:excel/excel.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImportService_0 extends _i1.SmartFake implements _i2.ImportService {
  _FakeImportService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ImportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImportRepository extends _i1.Mock implements _i3.ImportRepository {
  MockImportRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ImportService get importService =>
      (super.noSuchMethod(
            Invocation.getter(#importService),
            returnValue: _FakeImportService_0(
              this,
              Invocation.getter(#importService),
            ),
          )
          as _i2.ImportService);

  @override
  set importService(_i2.ImportService? _importService) => super.noSuchMethod(
    Invocation.setter(#importService, _importService),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i5.Excel?> loadFile() =>
      (super.noSuchMethod(
            Invocation.method(#loadFile, []),
            returnValue: _i4.Future<_i5.Excel?>.value(),
          )
          as _i4.Future<_i5.Excel?>);

  @override
  _i4.Future<List<_i6.ImportedUser>> getUsers(
    dynamic file,
    int? page,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUsers, [file, page, pageSize]),
            returnValue: _i4.Future<List<_i6.ImportedUser>>.value(
              <_i6.ImportedUser>[],
            ),
          )
          as _i4.Future<List<_i6.ImportedUser>>);

  @override
  _i4.Future<List<_i7.Minor>> getMinors(
    dynamic file,
    int? page,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMinors, [file, page, pageSize]),
            returnValue: _i4.Future<List<_i7.Minor>>.value(<_i7.Minor>[]),
          )
          as _i4.Future<List<_i7.Minor>>);

  @override
  _i4.Future<List<_i8.Test>> getTests(dynamic file, int? minorId) =>
      (super.noSuchMethod(
            Invocation.method(#getTests, [file, minorId]),
            returnValue: _i4.Future<List<_i8.Test>>.value(<_i8.Test>[]),
          )
          as _i4.Future<List<_i8.Test>>);

  @override
  _i4.Future<List<_i9.Item>> getItems(dynamic file, int? testId) =>
      (super.noSuchMethod(
            Invocation.method(#getItems, [file, testId]),
            returnValue: _i4.Future<List<_i9.Item>>.value(<_i9.Item>[]),
          )
          as _i4.Future<List<_i9.Item>>);
}
